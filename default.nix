{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.senpro.oci-containers.wordpress;

  wordpressOpts = { name, ... }: {
    options = {

      name = mkOption {
        default = "${name}";
        type = types.str;
        description = "The name of the wordpress instance. If undefined, the name of the attribute set will be used.";
      };

      mariadb.password = mkOption {
        default = "IBtujeuCWmRd11espzgSPWeN5FuswQXQiytNeJ2IhvkZVvuym6tLiTbK8IXQ9UW8";
        type = types.str;
        description = "Password for the MariaDB connection. Remember that this password is stored unencrypted in the nix-store.";
      };

      traefik.fqdn = mkOption {
        default = "wordpress.local";
        type = types.str;
        description = "Defines the FQDN under which the predefined container endpoint should be reachable.";
      };

    };
  };

in

{

  # interface

  options = {

    senpro.oci-containers.wordpress = mkOption {
      default = {};
      type = with types; attrsOf (submodule wordpressOpts);
      example = literalExpression ''
        {
          exampleSite = {
            mariadb = {
              password = "IBtujeuCWmRd11espzgSPWeN5FuswQXQiytNeJ2IhvkZVvuym6tLiTbK8IXQ9UW8";
            };
            traefik = {
              fqdn = "wordpress.local";
            };
          };
        }
      '';
      description = "Wordpress instances to be generated by the system.";
    };
  };

  # implementation

  config = mkIf (cfg != {}) {

    virtualisation.oci-containers.containers =
      let
        createWordpressInstance = opts: name:
          {
            image = "docker.io/library/wordpress:latest";
            extraOptions = [
              "--net=proxy"
            ]; # nixos currently doesn't support aardvark
            volumes = [
              "/srv/podman/wordpress/volume.d/${name}/wordpress:/var/www/html:rw"
            ];
            environment = {
              WORDPRESS_DB_HOST ="wordpress-${name}-mariadb";
              WORDPRESS_DB_NAME = "wordpress";
              WORDPRESS_DB_USER = "wordpress";
              WORDPRESS_DB_PASSWORD = "${opts.mariadb.password}";
            };
            autoStart = true;
          };
        createWordpressMariaDBInstance = opts: name:
          {
            image = "docker.io/library/mariadb:latest";
            extraOptions = [
              "--net=proxy"
            ]; # nixos currently doesn't support aardvark
            volumes = [
              "/srv/podman/wordpress/volume.d/${name}/wordpress-mariadb:/var/lib/mysql:rw"
            ];
            environment = {
              MARIADB_RANDOM_ROOT_PASSWORD =" yes";
              MYSQL_DATABASE = "wordpress";
              MYSQL_USER = "wordpress";
              MYSQL_PASSWORD = "${opts.mariadb.password}";
            };
            autoStart = true;
          };

      in listToAttrs (
        (map (name: { name = "wordpress-${name}-wordpress"; value = createWordpressInstance (builtins.getAttr name cfg) name; }) (builtins.attrNames cfg))
        ++ (map (name: { name = "wordpress-${name}-mariadb"; value = createWordpressMariaDBInstance (builtins.getAttr name cfg) name; }) (builtins.attrNames cfg))
      );

    system.activationScripts =
      let
        applyWordpressPHPSettings = opts: name:
          ''
            if grep -Fxq "php_value upload_max_filesize 100M" /srv/podman/wordpress/volume.d/${name}/wordpress/.htaccess && \
               grep -Fxq "php_value post_max_size 100M" /srv/podman/wordpress/volume.d/${name}/wordpress/.htaccess
            then
              echo "PHP settings already applied to /srv/podman/wordpress/volume.d/${name}/wordpress/.htaccess"
            else
              printf '%s\n' \
              "php_value upload_max_filesize 100M" \
              "php_value post_max_size 100M" \
              >> /srv/podman/wordpress/volume.d/${name}/wordpress/.htaccess
            fi
          '';
        createWordpressTraefikNetwork = opts: name:
          ''
            ${pkgs.podman}/bin/podman network create wordpress-${name}
          '';
        makeWordpressBindVolDirectories = opts: name:
          ''
            mkdir -p /srv/podman/wordpress/volume.d/${name}/wordpress
          '';
        makeWordpressMariaDBBindVolDirectories = opts: name:
          ''
            mkdir -p /srv/podman/wordpress/volume.d/${name}/wordpress-mariadb
          '';
        makeWordpressTraefikConfiguration = opts: name:
          ''
            printf '%s\n' \
            "http:"   \
            "  routers:"   \
            "    wordpress-${name}:" \
            "      rule: \"Host(\`${opts.traefik.fqdn}\`)\"" \
            "      service: \"wordpress-${name}\"" \
            "      entryPoints:" \
            "      - \"https2-tcp\"" \
            "      tls: true" \
            "  services:" \
            "    wordpress-${name}:" \
            "      loadBalancer:" \
            "        passHostHeader: true" \
            "        servers:" \
            "        - url: \"http://wordpress-${name}-wordpress:80\"" \
            > /srv/podman/traefik/volume.d/traefik/conf.d/wordpress-${name}.yml
          '';
      in listToAttrs (
        (map (name: { name = "apply${name}WordpressPHPSettings"; value = applyWordpressPHPSettings (builtins.getAttr name cfg) name; }) (builtins.attrNames cfg))
        ++ (map (name: { name = "create${name}WordpressTraefikNetwork"; value = createWordpressTraefikNetwork (builtins.getAttr name cfg) name; }) (builtins.attrNames cfg))
        ++ (map (name: { name = "make${name}WordpressBindVolDirectories"; value = makeWordpressBindVolDirectories (builtins.getAttr name cfg) name; }) (builtins.attrNames cfg))
        ++ (map (name: { name = "make${name}WordpressMariaDBBindVolDirectories"; value = makeWordpressMariaDBBindVolDirectories (builtins.getAttr name cfg) name; }) (builtins.attrNames cfg))
        ++ (map (name: { name = "make${name}WordpressTraefikConfiguration"; value = makeWordpressTraefikConfiguration (builtins.getAttr name cfg) name; }) (builtins.attrNames cfg))
      );
  };

}
